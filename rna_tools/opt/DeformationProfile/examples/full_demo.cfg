#
# Deformation Profile (DP) configuration file.
# 

# - - - - - - - - -
# Parameter: 'out_dir' (OPTIONAL)
# Description: Target directory for all resulting files.
#
# Value: STRING
#		STRING - Any valid directory path
#
# If missing or "" (empty) the script will assume as default the directory of the comparing model.

out_dir = "."


# - - - - - - - - -
# Parameter: 'ref_model' (MANDATORY)
# Description: PDB file containing the reference structure against which all comparisons will be
#             computed.
#
# Value: (STRING, INT)
#		STRING - Any valid PDB file full path name.
#		INT - Indicates which model to use (see comment).
#
# This parameter must be a tuple (file name, model). As some PDB files contain several models we
# need to specify which one to use. If you don't know or don't care just use a '0'. 	 

ref_model = ("/my_path/x.pdb", 0)

# - - - - - - - - -
# Parameter: 'cmp_model' (OPTIONAL, see 'cmp_list')
# Description: List of PDB files containing the structures to be compared with the reference one.
#
# Value: [(STRING, INT), ..., (STRING, INT)]
#		STRING - Any valid PDB file full path name.
#		INT - Indicates which model to use (see comment).
#
# Although optional, either 'cmp_model' or 'cmp_list' MUST be defined.
# 
# This parameter is a list of tuples. Each tuple follows the same rules as defined in 'ref_model'
# parameter.

cmp_model = [("/my_path/y1.pdb", 0),
             ("/my_path/y2.pdb", 0),
             ("/my_path/y3.pdb", 0)]


# - - - - - - - - -
# Parameter: 'cmp_list' (OPTIONAL, see 'cmp_model')
# Description: File containing a list of PDB files to be compared with the reference structure.
#
# Value: STRING
#		STRING - Any valid text file full path name.
#
# Although optional, either 'cmp_list' or 'cmp_model' MUST be defined.
#
# This parameters allows a separated file with the list of comparing structures.
# The file should contain one pdb full file name per line followed by the model (separated by ";").
# If no model is specified 0 will be assumed (see 'model_list.txt' for an example).

cmp_list = "model_list.txt"


# - - - - - - - - -
# Parameter: 'aligns' (OPTIONAL)
# Description: List of alignment directives.
#
# Value: [(STRING1, INT1, STRING2, INT2, INT3)...(STRING1, INT1, STRING2, INT2, INT3)]
#		STRING1 - Any valid chain name in the reference model.  
#		INT1 - First residue to consider in the reference chain.
#		STRING2 - Any valid chain name in the comparing model.  
#		INT2 - First residue to consider in the comparing chain.
#		INT3 - Number of residues to consider.
#
# Sometimes the reference and comparing models have different chain or residue names. This parameter
# allows one to easily specify a correspondence between reference and comparing residues.
#
# Residues will be compared using COMMON ATOMS ONLY. This means that, if residue type don't match,
# only part of the atoms (mainly backbone atoms) will be used in the comparison.
#
# If missing or [] (empty) the program will perform a pairwise local sequence alignment between
# chains with the same name. Residues will be matched by their names. We use a slightly modified
# Smith-Waterman local alignment algorithm and only consider the longest non-gaped alignments.

aligns = [("A", 1, "A", 1, 10),
          ("B", 1, "C", 10, 5)]

#
# secondary structure definition
#

#
# NOTE: all residues' coordinates are 0-bases 'alignment' coordinates.  
#

# - - - - - - - - -
# Parameter: 'helices' (OPTIONAL)
# Description: List of double stranded domains (DSD) to be plotted.
#
# Value: [(STRING, INT1, INT2, INT3, INT4)...(STRING, INT1, INT2, INT3, INT4)]
#		STRING - Any unique arbitrary name to identify the DSD.  
#		INT1 - First residue of the 5' strand of DSD.
#		INT2 - Number of residues of the 5' strand of DSD to consider.  
#		INT3 - First residue of the 3' strand of DSD.
#		INT4 - Number of residues of the 3' strand of DSD to consider.  
#
# Lengths of the 5' and 3' strands can be different due to bulged residues.
# We don't care about individual base pairs. We just want to draw squares around DSD regions. 

helices = [("H1", 0, 4, 10, 4), ("H2", 5, 2, 10, 2)]

# - - - - - - - - -
# Parameter: 'loops' (OPTIONAL)
# Description: List of single stranded domains (SSD) to be plotted.
#
# Value: [(STRING, INT1, INT2)...(STRING, INT1, INT2)]
#		STRING - Any unique arbitrary name to identify the SSD.  
#		INT1 - First residue of the SSD.
#		INT2 - Number of residues to consider.  

loops = [("L1", 7, 3)]

# - - - - - - - - -
# Parameter: 'draw' (OPTIONAL)
# Description: Indicates which DSD, SSD or relation between them should be plotted.
#
# Value: [STRING, ..., STRING]
#		STRING - Each string defines a rectangular region on the plot. The syntax must be:
                 '<domain_name>[x<domain_name>][:<alt_name>]'
#                - 'domain_name' MUST correspond to a domain defined in 'helices' or 'loops' parameters.
#                - 'alt_name' is an alternative name to be displayed. Can be anything. 
#
# Examples:
#	"H1" - draws a square around the intersection of the residues belonging to H1 DSD. 
#	"H1:helix I" - same as previous but displays 'helix I' instead of 'H1' (default).
#	"H1xH2" - draws a square around the intersection of the residues belonging to H1 and H2 DSDs.
#	"H1xH2:I x II" - same as previous but displays 'Ix II' instead of 'H1xH2' (default).
#	"L1xH2" - draws a square around the intersection of the residues belonging to L1 SSD and H2 DSDs.

draw = ["H1:x", "H2:y", "L1", "H1xH2"]

# - - - - - - - - -
# Parameter: 'matrix' (OPTIONAL)
# Description: Tells to program whether to write or not matrix data output.
#
# Value: BOOL - 'True' - Writes data / 'False' - Doesn't write data. 
#
# If missing it will write data by default. This can be useful if one only wants to produce
# matrix plots. Either 'matrix' or 'svg' parameters must be True.

matrix=False

# - - - - - - - - -
# Parameter: 'svg' (OPTIONAL)
# Description: Tells to program whether to plot or not matrix graphics.
#
# Value: BOOL - 'True' - Plots matrix / 'False' - Doesn't plot matrix. 
#
# If missing it will plot by default. This can be useful if one only wants to write text data.
# Either 'matrix' or 'svg' parameters must be True.

svg=True

# - - - - - - - - -
# Parameter: 'quiet_err' (OPTIONAL)
# Description: Tells to program whether to print non fatal messages to the stderr output.
#
# Value: BOOL - 'True' - prints messages / 'False' - Doesn't print. 
#
# If missing it will print by default.

quiet_err = False

# - - - - - - - - -
# Parameter: 'quiet_out' (OPTIONAL)
# Description: Tells to program whether to print non fatal messages to the stdout output.
#
# Value: BOOL - 'True' - prints messages / 'False' - Doesn't print. 
#
# If missing it will print by default.

quiet_out = False